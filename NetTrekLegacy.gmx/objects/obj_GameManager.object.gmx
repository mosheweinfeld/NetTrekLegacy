<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Initialize Variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_set_axis_deadzone(0,0.1);
global.partSystem = part_system_create();

GAME_TYPE = STANDARD;

time_factor = 0;

cameraX = 0;
cameraY = 0;

mapWidth = 100000;
mapHeight = 100000;
global.impulseMultiplier = 3;
global.warpMultiplier = 3;
global.warpFactorMultiplier = 1.2;

rightPanelScale = 0.2;
rightPanelSize = 256;
rpOffset = room_width-rightPanelSize;

tacticalSize = sprite_get_width(spr_Tactical);
tacticalOffset = rpOffset-tacticalSize;

minimapSize = rightPanelSize;
minimapScale = minimapSize/obj_GameManager.mapWidth;
minimapSurface = surface_create(minimapSize,minimapSize);

sensorRange = 10000;

sensorSurfaceOld = surface_create(minimapSize,minimapSize);
sensorSurfaceNew = surface_create(minimapSize,minimapSize);

sectorMapSize = minimapSize;
sectorMapScale = sectorMapSize/sensorRange;
sectorSurface = surface_create(sectorMapSize,sectorMapSize);
secHalf = sectorMapSize/2;

planets = 40;
planetsPerRow = 5;   //How many planets/columns are in each row of the board
planetWiggle = (mapWidth/planetsPerRow)/2; //Maximum distance a planet can drift from its placement position

gameTime = 0;

global.xOffset = (room_width-rightPanelSize-tacticalSize)/2;
global.yOffset = room_height/2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Debug</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
TEAMS = 4;
TEAM = 1;

TINFO[0,2] = c_white;
TINFO[1,0] = "United Federation of Planets";//Team Name
TINFO[1,1] = spr_FederationShips;           //Team Ships
TINFO[1,2] = c_yellow;                      //Team Color
TINFO[2,0] = "Klingon Empire";
TINFO[2,1] = spr_KlingonShips;
TINFO[2,2] = c_red;
TINFO[3,0] = "Romulan Space Empire";
TINFO[3,1] = spr_RomulanShips;
TINFO[3,2] = c_aqua;
TINFO[4,0] = "Orion Syndicate";
TINFO[4,1] = spr_OrionShips;
TINFO[4,2] = c_green;

playersPerTeam = 4;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Generate Planets</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cols = planets/planetsPerRow;
px = mapWidth/planetsPerRow;
py = mapHeight/cols;

f1 = file_text_open_read("PlanetNames.txt");
f2 = file_text_open_read("PlanetLocations.txt");

var i;
i = 1;

while(!file_text_eof(f1)){    
    p = instance_create(0,0,obj_Planet);
    
    p.name = file_text_read_string(f1);
    file_text_readln(f1);
    p.sname = file_text_read_string(f1);
    file_text_readln(f1);
    p.wx = file_text_read_real(f2)*mapWidth;
    file_text_readln(f2);
    p.wy = file_text_read_real(f2)*mapHeight;
    file_text_readln(f2);
    
    p.team = 0;
    if(i&lt;5){
        p.team = i;
        i+=1;
    }
}

file_text_close(f1);
file_text_close(f2);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Spawn Teams</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Spawn Starfield</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>starfield_init</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(obj_Player))with(WorldObject)event_perform(ev_other, ev_user0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.time_factor = delta_time/1000000;

if(instance_exists(obj_Player)){
    cameraX = obj_Player.wx;
    cameraY = obj_Player.wy;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Sensor Update</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Starfield</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>starfield_draw</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Borders</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_red);
var rh,rw;
rh = room_height/2;
rw = room_width/2;
if(cameraY&lt;rh){
    draw_line_width(0,-cameraY+global.yOffset,room_width,-cameraY+global.yOffset,3);
}
if(cameraX&lt;rw){
    draw_line_width(-cameraX+global.xOffset,0,-cameraX+global.xOffset,room_height,3);
}
if(cameraY&gt;mapHeight-rh){
    draw_line_width(0,mapHeight-cameraY+global.yOffset,room_width,mapHeight-cameraY+global.yOffset,3);
}
if(cameraX&gt;mapWidth-rw){
    draw_line_width(mapWidth-cameraX+global.xOffset,0,mapWidth-cameraX+global.xOffset,room_height,3);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Right Panel</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_set_target(minimapSurface);
draw_set_font(fnt_smallFont);
draw_set_halign(fa_center);
draw_set_valign(fa_top);

draw_set_color(c_teal);
draw_rectangle(0,0,rpOffset,room_height,false);

//DRAW QUADRANT AND SECTOR MAP

draw_set_color(c_black);
draw_rectangle(0,0,minimapSize,minimapSize,false);


with(obj_Planet){

    draw_set_color(obj_GameManager.TINFO[team,2]);

    draw_circle(wx*obj_GameManager.minimapScale,wy*obj_GameManager.minimapScale,3,false);    
    draw_text(wx*obj_GameManager.minimapScale,wy*obj_GameManager.minimapScale+3,sname);
}
if(instance_exists(obj_Player)){
    draw_set_color(c_orange);
    var tx = obj_Player.wx*obj_GameManager.minimapScale;
    var ty = obj_Player.wy*obj_GameManager.minimapScale;
    
    draw_triangle(
        tx+lengthdir_x(5,obj_Player.image_angle),
        ty+lengthdir_y(5,obj_Player.image_angle),
        tx+lengthdir_x(4,obj_Player.image_angle+135),
        ty+lengthdir_y(4,obj_Player.image_angle+135),
        tx+lengthdir_x(4,obj_Player.image_angle+225),
        ty+lengthdir_y(4,obj_Player.image_angle+225),
        false
        );
}

surface_reset_target();
draw_set_color(c_white);
draw_surface(minimapSurface,rpOffset,minimapSize+14);

draw_sprite(spr_RightPanel1,0,room_width,minimapSize*2+14);

//draw_text(16,0,string(floor(obj_Player.wx*obj_GameManager.minimapScale)));
//draw_text(16,16,string(floor(obj_Player.wy*obj_GameManager.minimapScale)));

surface_set_target(sectorSurface);
draw_clear(c_black);

if(instance_exists(obj_Player)){

    with(obj_Planet){
        var pdis = point_distance(obj_Player.wx,obj_Player.wy,wx,wy);
        if(pdis&gt;obj_GameManager.sensorRange)continue;
        var pdir = point_direction(obj_Player.wx,obj_Player.wy,wx,wy);
        
        draw_set_color(obj_GameManager.TINFO[team,2]);
        
        draw_circle(obj_GameManager.secHalf+lengthdir_x(pdis*obj_GameManager.sectorMapScale,pdir),
                obj_GameManager.secHalf+lengthdir_y(pdis*obj_GameManager.sectorMapScale,pdir)
                ,7,true);
                
        draw_set_color(c_white);
        draw_text(obj_GameManager.secHalf+lengthdir_x(pdis*obj_GameManager.sectorMapScale,pdir),
                obj_GameManager.secHalf+lengthdir_y(pdis*obj_GameManager.sectorMapScale,pdir)+7,
                sname
                );
    }
    
    if(obj_Player.atWarp&amp;&amp;obj_Player.bearing!=obj_Player.bearingPrevious){
        draw_set_color(c_blue);
        draw_line(
        secHalf,
        secHalf,
        secHalf+lengthdir_x(sensorRange,obj_Player.image_angle),
        secHalf+lengthdir_y(sensorRange,obj_Player.image_angle)
        );
    }
    
    draw_set_color(c_orange);
    draw_triangle(
        secHalf+lengthdir_x(5,obj_Player.image_angle),
        secHalf+lengthdir_y(5,obj_Player.image_angle),
        secHalf+lengthdir_x(4,obj_Player.image_angle+135),
        secHalf+lengthdir_y(4,obj_Player.image_angle+135),
        secHalf+lengthdir_x(4,obj_Player.image_angle+225),
        secHalf+lengthdir_y(4,obj_Player.image_angle+225),
        true
        );

}

surface_reset_target();
draw_set_color(c_white);
draw_surface(sectorSurface,rpOffset,0);

draw_sprite(spr_RightPanel2,0,room_width,minimapSize);

draw_set_color(c_orange);
draw_line(rpOffset,0,rpOffset,room_height);
draw_line(rpOffset,minimapSize,room_width,minimapSize);
draw_line(rpOffset,minimapSize+14,room_width,minimapSize+14);
draw_line(rpOffset,minimapSize*2+14,room_width,minimapSize*2+14);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Tactical</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_smallFont);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

draw_sprite(spr_Tactical,0,rpOffset,0);
draw_set_colour(c_orange);
draw_line(tacticalOffset,0,tacticalOffset,room_height);

if(instance_exists(obj_Player)){
    var hc = obj_Player.hullCurrent/obj_Player.hullMax;
    var to = tacticalOffset+(tacticalSize/2);
    
    draw_sprite_ext(obj_Player.sprite_index,obj_Player.image_index,to,47,
    1,1,0,color_spectrum_pick(c_lime,c_red,hc),1);
    
    draw_set_color(color_spectrum_pick(c_lime,c_red,obj_Player.shieldPower/obj_Player.shieldCapacity));
    draw_circle(to,47,20,true);
    
    draw_set_color(c_white);
    draw_text(tacticalOffset+56,76,string(obj_Player.shieldPower)+" / "+string(obj_Player.shieldCapacity));
    draw_text(tacticalOffset+56,87,string(obj_Player.hullCurrent)+" / "+string(obj_Player.hullMax));
    
    draw_healthbar(tacticalOffset+5,117,tacticalOffset+tacticalSize-5,139,
    (1-obj_Player.phaserReload/obj_Player.phaserFireRate)*100,c_white,c_white,c_yellow,0,false,false);
    draw_sprite(spr_PhaserBank,0,to,128);
    
    for(var i = 0;i &lt; obj_Player.torpedoMax;i++){
        if(obj_Player.torpedoBay[i]){
            draw_rectangle_colour(tacticalOffset+5,145+(i*12),tacticalOffset+tacticalSize-5,155+(i*12),c_ltgray,c_white,c_ltgray,c_ltgray,false);
        }else{
            draw_healthbar(tacticalOffset+5,145+(i*12),tacticalOffset+tacticalSize-5,155+(i*12),
            (1-obj_Player.torpedoReload/obj_Player.torpedoReloadRate)*100,c_dkgray,c_dkgray,c_ltgray,0,true,false);
        }
        draw_sprite(spr_TorpedoTube,0,to,150+(i*12));
    }
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
